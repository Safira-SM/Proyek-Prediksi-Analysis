# -*- coding: utf-8 -*-
"""Submission Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PKcWa2Hx8Bd9m_AZwngDsvFa8nSIcLAI

# Submission 1

Melakukan import library yang digunakan dalam proyek
"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from scipy.stats import ttest_ind
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

from google.colab import files
uploaded = files.upload()

"""Tahap selanjutnya,
membaca data dan menampilkan sampel minimal 5 data serta mengetahui type dari masing-masing data dan jumlah missing value
"""

df = pd.read_csv("Melbourne Housing Snapshot.csv")

print("\nContoh Data : ")
print(df.head())

print("\nInfo Data :")
print(df.info())

print("\nJumlah Baris & Kolom :")
print(df.shape)

print("\nDeskripsi Data : ")
print(df.describe())

print("\nTipe Data : ")
print(df.dtypes)

print("\nMissing Value : ")
print(df.isnull().sum())

"""Hasil :
1. Untuk jumlah data, saya memiliki 5 baris x 12 kolom
2. Type data yang dimiliki yaitu : float64(12), int64(1), object(8)
3. Adapun missing value ditemukan pada kolom : Car, BuildingArea, YearBuilt, dan CouncilArea.

Dari data yang tertera diatas, karena adanya missing values pada data maka akan di lakukan permberihan pada data.

## Persiapan Data Yang Akan Digunakan
"""

df.drop_duplicates(inplace=True)

"""Mengapus data duplikat"""

df.dropna(subset=['CouncilArea'], inplace=True)

"""Menghapus kolom CoouncilArea"""

df = df[df['BuildingArea'].notnull() & df['Car'].notnull()]

"""Menghapus baris missing value pada kolom Building dan Car"""

median_year = df['YearBuilt'].median()
df.loc[:,'YearBuilt'] = df['YearBuilt'].fillna(median_year)

"""Mengisi nilai kosng dengan median pada kolom YearBuilt"""

print("\nMissing Value : ")
print(df.isnull().sum())

"""berdasarkan mengecekan hasil preprocessing data sudah tidak terdapat missing value pada data

# Analisis Korelasi
"""

numerical_kolom = ['Price', 'Rooms', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt']
correlation_matrix = df[numerical_kolom].corr()
print(correlation_matrix)

"""Seleksi dan menghitung kolom numerik yang akan digunakan"""

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Korelasi Antar Kolom Numerik")
plt.show()

"""Melakukan visualisasi data dengan heatmap"""

group_large = df[df['BuildingArea'] > 150]['Price']
group_small = df[df['BuildingArea'] <= 150]['Price']

t_stat, p_value = ttest_ind(group_large, group_small)

print("Nilai t-statistik:", t_stat)
print("Nilai p-value:", p_value)

mean_large = group_large.mean()
mean_small = group_small.mean()

print("Rata-rata Harga di BuildingArea > 150:", mean_large)
print("Rata-rata Harga di BuildingArea <= 150:", mean_small)

"""test Hipotesis dan rata-rata untuk Building Area dan mendapatkan hasil sesuai dengan yang tertera diatas"""

# test Hipotesis dan rata-rata untuk Car

g_car1= df[df['Car'] > 1]['Price']
g_car2= df[df['Car'] <= 1]['Price']

t_stat, p_value = ttest_ind(g_car1, g_car2)

print("Nilai t-statistik:", t_stat)
print("Nilai p-value:", p_value)

mean_car1 = g_car1.mean()
mean_car2 = g_car2.mean()

print("Rata-rata Harga di Car > 1:", mean_car1)
print("Rata-rata Harga di Car <= 1:", mean_car2)

"""test Hipotesis dan rata-rata untuk kolom Car dan mendapatkan hasil sesuai dengan yang tertera diatas"""

# test Hipotesis dan rata-rata untuk Bathroom

g_Bathroom1 = df[df['Bathroom'] > 2]['Price']
g_Bathroom2 = df[df['Bathroom'] <= 2]['Price']

t_stat, p_value = ttest_ind(g_Bathroom1, g_Bathroom2)

print("Nilai t-statistik:", t_stat)
print("Nilai p-value:", p_value)

mean_Bathroom1 = g_Bathroom1.mean()
mean_Bathroom2 = g_Bathroom2.mean()

print("Rata-rata Harga di Bathroom > 2:", mean_Bathroom1)
print("Rata-rata Harga di Bathroom <= 2:", mean_Bathroom2)

"""test Hipotesis dan rata-rata untuk kolom Bathroom dan mendapatkan hasil sesuai dengan yang tertera diatas"""

# test Hipotesis dan rata-rata untuk Landsize

g_Landsize = df[df['Landsize'] > 1000]['Price']
g_Landsize2 = df[df['Landsize'] <= 1000]['Price']

t_stat, p_value = ttest_ind(g_Landsize, g_Landsize2)

print("Nilai t-statistik:", t_stat)
print("Nilai p-value:", p_value)

mean_Landsize = g_Landsize.mean()
mean_Landsize2 = g_Landsize2.mean()

print("Rata-rata Harga di Landsize > 1000:", mean_Landsize)
print("Rata-rata Harga di Landsize <= 1000:", mean_Landsize2)

"""test Hipotesis dan rata-rata untuk Landsize dan mendapatkan hasil sesuai dengan yang tertera diatas

# Permodelan
"""

X = df[['Rooms', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt']]
y = df['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

LR_model = LinearRegression()
LR_model.fit(X_train, y_train)
y_pred_LR = LR_model.predict(X_test)

DT_model = DecisionTreeRegressor()
DT_model.fit(X_train, y_train)
y_pred_DT = DT_model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred_LR))
r2 = r2_score(y_test, y_pred_LR)

print("Linear Regression - RMSE:", rmse)
print("Linear Regression - R2 Score:", r2)

rmse = np.sqrt(mean_squared_error(y_test, y_pred_DT))
r2 = r2_score(y_test, y_pred_DT)

print("Decision Tree - RMSE:", rmse)
print("Decision Tree - R2 Score:", r2)

"""- Memisahkan data menjadi data latih dan data uji
- Membangun model linear sederhana untuk prediksi harga
- Membanguna model Decision Tree untuk menangkap hubungan non linear
- Dan mengukur performa masing-masing model

# Tahap Lanjutan
"""

X = df[['Rooms', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt']]
y = df['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

RF_model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
RF_model.fit(X_train, y_train)

y_pred_RF = RF_model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred_RF))
r2 = r2_score(y_test, y_pred_RF)

print("Random Forest - RMSE:", rmse)
print("Random Forest - R2 Score:", r2)

importance = RF_model.feature_importances_
feature_names = X.columns

plt.figure(figsize=(10, 6))
sns.barplot(x=importance, y=feature_names)
plt.title("Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Features")

"""- Membangun model ensemble agar lebih akurat dan stabil
- Megetahui fitur yang paling berpengaruh terhadap prediksi harga
"""